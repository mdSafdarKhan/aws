Let’s create Spring Boot project and add amazon dependency
	
	<dependency>
	   <groupId>com.amazonaws</groupId>
	   <artifactId>aws-java-sdk</artifactId>
	   <version>1.11.133</version>
	</dependency>
	
Now let’s add s3 bucket properties to our application.yml file:

	amazonProperties:
	  endpointUrl: https://s3.us-east-2.amazonaws.com
	  accessKey: XXXXXXXXXXXXXXXXX
	  secretKey: XXXXXXXXXXXXXXXXXXXXXXXXXX
	  bucketName: your-bucket-name
	  
It’s time to create our RestController with two request mappings “/uploadFile” and “/deleteFile”.

	@RestController
	@RequestMapping("/storage/")
	public class BucketController {

		private AmazonClient amazonClient;

		@Autowired
		BucketController(AmazonClient amazonClient) {
			this.amazonClient = amazonClient;
		}

		@PostMapping("/uploadFile")
		public String uploadFile(@RequestPart(value = "file") MultipartFile file) {
			return this.amazonClient.uploadFile(file);
		}

		@DeleteMapping("/deleteFile")
		public String deleteFile(@RequestPart(value = "url") String fileUrl) {
			return this.amazonClient.deleteFileFromS3Bucket(fileUrl);
		}
	}
	
This code is actually broken because we don’t have AmazonClient class yet, so let’s create this class with the following fields.

	@Service
	public class AmazonClient {

		private AmazonS3 s3client;

		@Value("${amazonProperties.endpointUrl}")
		private String endpointUrl;
		
		@Value("${amazonProperties.bucketName}")
		private String bucketName;
		
		@Value("${amazonProperties.accessKey}")
		private String accessKey;
		
		@Value("${amazonProperties.secretKey}")
		private String secretKey;
		
		@PostConstruct
		private void initializeAmazon() {
			AWSCredentials credentials = new BasicAWSCredentials(this.accessKey, this.secretKey);
			this.s3client = new AmazonS3Client(credentials);
		}
	}

S3 bucket uploading method requires File as a parameter, but we have MultipartFile, so we need to add method which can make 
this convertion.

	private File convertMultiPartToFile(MultipartFile file) throws IOException {
		File convFile = new File(file.getOriginalFilename());
		FileOutputStream fos = new FileOutputStream(convFile);
		fos.write(file.getBytes());
		fos.close();
		return convFile;
	}
	
Also you can upload the same file many times, so we should generate unique name for each of them. 
Let’s use a timestamp and also replace all spaces in filename with underscores to avoid issues in future.

	private String generateFileName(MultipartFile multiPart) {
		return new Date().getTime() + "-" + multiPart.getOriginalFilename().replace(" ", "_");
	}
	
Finally, we will combine all these methods into one general that is called from our controller. 
This method will save a file to S3 bucket and return fileUrl which you can store to database. 
For example you can attach this url to user’s model if it’s a profile image etc.

	public String uploadFile(MultipartFile multipartFile) {
		String fileUrl = "";
		try {
			File file = convertMultiPartToFile(multipartFile);
			String fileName = generateFileName(multipartFile);
			fileUrl = endpointUrl + "/" + bucketName + "/" + fileName;
			uploadFileTos3bucket(fileName, file);
			file.delete();
		} catch (Exception e) {
		   e.printStackTrace();
		}
		return fileUrl;
	}
	
The only thing left to add is deleteFile() method.

	public String deleteFileFromS3Bucket(String fileUrl) {
		String fileName = fileUrl.substring(fileUrl.lastIndexOf("/") + 1);
		s3client.deleteObject(new DeleteObjectRequest(bucketName + "/", fileName));
		return "Successfully deleted";
	}
	
Note: S3 bucket cannot delete file by url. It requires a bucket name and a file name, that’s why we retrieved file name from url.
